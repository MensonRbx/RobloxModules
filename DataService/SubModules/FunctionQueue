local Players = game:GetService("Players")

local FunctionQueue = {}
FunctionQueue.__index = FunctionQueue

function FunctionQueue.new(waitTime)
	local self = setmetatable({}, FunctionQueue)
	
	self.waitTime = waitTime or 6
	
	self.content = {
		name = {},
		userIds = {},
		functions = {},
		paramaters = {}
	}
	
	coroutine.wrap(self.main)(self)
	
	return self
end

function FunctionQueue:GetContent()
	return self.content
end

function FunctionQueue:AddToQueue(name, userId, func, ...)
	table.insert(self.content["name"], name)
	table.insert(self.content["userIds"], userId)
	table.insert(self.content["functions"], func)
	table.insert(self.content["paramaters"], table.pack(...))
end

function FunctionQueue:RemoveFromQueue(name, userId, fromHandleRequest)
	
	for i = 1, 10000, 1 do
		local index = table.find(self.content["name"], name, i)
		
		if not index then
			if not fromHandleRequest then
				warn("Name not found in queue!")
			end
			return
		end
		
		if self.content["userIds"][index] == userId then
			for _, list in self.content do
				table.remove(list, index)
			end
			return
		else
			i = index
		end
		
	end
	
end

function FunctionQueue:main()
	while true do
		task.wait(self.waitTime)
		
		if self.content["functions"][1] then
			local func = self.content["functions"][1]
			local parameters = self.content["paramaters"][1]
			
			local firstParam = parameters[1]

			print("Executing function")
			
			local success, err = xpcall(function()
				coroutine.wrap(func)(firstParam, table.unpack(parameters, 2, #parameters))
			end, function()
				warn("Function",self.content["name"][1],"Failed for user",self.content["userIds"][1], "Retrying...")
				coroutine.wrap(func)(firstParam, table.unpack(parameters, 2, #parameters))
			end)
			
			if success then
				print("Function "..self.content["name"][1].. "For "..tostring(self.content["userIds"][1]).." Successful")
			end

			for i, list in self.content do
				table.remove(list, 1)
			end
			
		end
		
	end
	
end

return FunctionQueue
